package opentest

import (
	"github.com/getkin/kin-openapi/openapi3"
	"gopkg.in/yaml.v3"
)

type Value struct {
	// Actual value of the response body
	Value interface{}

	// Reference, if any.
	Ref string
}

func (b *Value) Validate(mediaType *openapi3.MediaType) error {
	return ValidateOnSchema(b.Value, mediaType.Schema)
}


func (b *Value) UnmarshalYAML(node *yaml.Node) error {
	if node.Kind == yaml.ScalarNode {
		b.Value = node.Value
		return nil
	}
	return node.Decode(&b.Value)
}

func (b *Value) Resolve(d *Definition) error {
	val, err := returnValue(b.Value, d)
	if err != nil {
		return err
	}
	b.Value = val
	return nil
}

func returnValue(i interface{}, d *Definition) (interface{}, error) {
	switch typed := i.(type) {
	case string:
		if !IsValidExampleRef(typed) {
			return typed, nil
		}
		return d.GetExampleOrPart(typed)
	case map[string]interface{}:
		for k, v := range typed {
			newV, err := returnValue(v, d)
			if err != nil {
				return nil, err
			}
			typed[k] = newV
		}
		return typed, nil
	case []interface{}:
		for i, v := range typed {
			newV, err := returnValue(v, d)
			if err != nil {
				return nil, err
			}
			typed[i] = newV
		}
		return typed, nil
	default:
		return typed, nil
	}
}



/*


func ValidateValue(v interface{}, d *Definition, mediaType *openapi3.MediaType) error {
	resolved, err := ResolveValue(v, d)
	if err != nil {
		return err
	}
	// Make sure that the resolved value fits the schema.
	return ValidateOnSchema(resolved, mediaType.Schema)
}

// ResolveValue converts the value, if it is a string, to the valid content type.
func ResolveValue(v interface{}, d *Definition) (interface{}, error) {
	switch typed := v.(type) {
	case string:
		// If it isn't a reference type, we shouldn't try to change it.
		if !IsValidExampleRef(typed) {
			return typed, nil
		}
		return d.GetExampleOrPart(typed)
	default:
		return typed, nil
	}
}*/