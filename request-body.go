package opentest

import (
	"errors"

	"github.com/getkin/kin-openapi/openapi3"
)

var (
	ErrContentMediaTypeNotFound     = errors.New("matching media type not found for content in spec")
	ErrRequestBodyMediaTypeNotFound = errors.New("matching media type not found for request body in spec")
	ErrRequestBodyNotFound          = errors.New("matching request body not found in spec")
	ErrRequestBodyUnresolvedRef     = errors.New("request body has an unresolved ref")
)

// Content is a map of content type to value
type Content map[string]*Value

func (c *Content) Resolve(d *Definition) error {
	if c == nil {
		return nil
	}
	for _, v := range *c {
		if err := v.Resolve(d); err != nil {
			return err
		}
	}
	return nil
}

func (c *Content) Validate(content openapi3.Content) error {
	for k, v := range *c {
		mediaType := content.Get(k)
		if mediaType == nil {
			return ErrContentMediaTypeNotFound
		}
		if err := v.Validate(mediaType); err != nil {
			return err
		}
	}
	return nil
}

type RequestBody map[string]*Value

func (b *RequestBody) Resolve(d *Definition) error {
	if b == nil {
		return nil
	}
	for _, v := range *b {
		if err := v.Resolve(d); err != nil {
			return err
		}
	}
	return nil
}

func (b *RequestBody) Validate(op *openapi3.Operation) error {
	if op.RequestBody.Value == nil {
		if op.RequestBody.Ref != "" {
			return ErrRequestBodyNotFound
		}
		return ErrRequestBodyUnresolvedRef
	}

	for k, v := range *b {
		mediaType := op.RequestBody.Value.GetMediaType(k)
		if mediaType == nil {
			return ErrRequestBodyMediaTypeNotFound
		}
		if err := v.Validate(mediaType); err != nil {
			return err
		}
	}
	return nil
}
