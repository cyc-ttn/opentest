package opentest

import (
	"errors"

	"gopkg.in/yaml.v3"
)

var (
	ErrInvalidSecurityMissingValue = errors.New("expect value with security")
)

// Security defines necessary security parameters to run the test.
type Security struct {
	// Name of the security scheme. Must be one of the securitySchemes defined in the test.
	Name string

	// Value to be input into the security scheme, if any.
	Value interface{}

	// Ref will be stored here instead of value.
	Ref string
}

func (s *Security) Resolve(d *Definition) error {
	str, ok := s.Value.(string)
	if !ok {
		return nil
	}
	if !IsValidExampleRef(str) {
		return nil
	}

	ex, err := d.GetExampleOrPart(str)
	if err != nil {
		return err
	}
	s.Ref = str
	s.Value = ex
	return nil
}

func (s *Security) UnmarshalYAML(node *yaml.Node) error {
	switch node.Kind {
	case yaml.ScalarNode:
		s.Name = node.Value
		return nil
	case yaml.MappingNode:
		// Node should have at least two
		if len(node.Content) < 2 {
			return ErrInvalidSecurityMissingValue
		}
		s.Name = node.Content[0].Value
		if err := node.Content[1].Decode(&s.Value); err != nil {
			return err
		}
	}
	return nil
}
